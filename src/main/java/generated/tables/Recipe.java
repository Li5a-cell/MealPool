/**
 * This class is generated by jOOQ
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.RecipeRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Recipe extends TableImpl<RecipeRecord> {

	private static final long serialVersionUID = 400264336;

	/**
	 * The reference instance of <code>public.recipe</code>
	 */
	public static final Recipe RECIPE = new Recipe();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<RecipeRecord> getRecordType() {
		return RecipeRecord.class;
	}

	/**
	 * The column <code>public.recipe.id</code>.
	 */
	public final TableField<RecipeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.recipe.chefid</code>.
	 */
	public final TableField<RecipeRecord, Integer> CHEFID = createField("chefid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.recipe.description</code>.
	 */
	public final TableField<RecipeRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(1000), this, "");

	/**
	 * The column <code>public.recipe.name</code>.
	 */
	public final TableField<RecipeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>public.recipe.favoritecount</code>.
	 */
	public final TableField<RecipeRecord, Integer> FAVORITECOUNT = createField("favoritecount", org.jooq.impl.SQLDataType.INTEGER.defaulted(true), this, "");

	/**
	 * The column <code>public.recipe.servings</code>.
	 */
	public final TableField<RecipeRecord, Integer> SERVINGS = createField("servings", org.jooq.impl.SQLDataType.INTEGER.defaulted(true), this, "");

	/**
	 * The column <code>public.recipe.purchasedcount</code>.
	 */
	public final TableField<RecipeRecord, Integer> PURCHASEDCOUNT = createField("purchasedcount", org.jooq.impl.SQLDataType.INTEGER.defaulted(true), this, "");

	/**
	 * The column <code>public.recipe.price</code>.
	 */
	public final TableField<RecipeRecord, BigDecimal> PRICE = createField("price", org.jooq.impl.SQLDataType.DECIMAL.precision(12, 2).defaulted(true), this, "");

	/**
	 * The column <code>public.recipe.photo</code>.
	 */
	public final TableField<RecipeRecord, String> PHOTO = createField("photo", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * Create a <code>public.recipe</code> table reference
	 */
	public Recipe() {
		this("recipe", null);
	}

	/**
	 * Create an aliased <code>public.recipe</code> table reference
	 */
	public Recipe(String alias) {
		this(alias, RECIPE);
	}

	private Recipe(String alias, Table<RecipeRecord> aliased) {
		this(alias, aliased, null);
	}

	private Recipe(String alias, Table<RecipeRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<RecipeRecord, Integer> getIdentity() {
		return Keys.IDENTITY_RECIPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<RecipeRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_8F;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<RecipeRecord>> getKeys() {
		return Arrays.<UniqueKey<RecipeRecord>>asList(Keys.CONSTRAINT_8F);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<RecipeRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<RecipeRecord, ?>>asList(Keys.CONSTRAINT_8);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Recipe as(String alias) {
		return new Recipe(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Recipe rename(String name) {
		return new Recipe(name, null);
	}
}
