/**
 * This class is generated by jOOQ
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.KeywordRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keyword extends TableImpl<KeywordRecord> {

	private static final long serialVersionUID = -794116466;

	/**
	 * The reference instance of <code>public.keyword</code>
	 */
	public static final Keyword KEYWORD = new Keyword();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<KeywordRecord> getRecordType() {
		return KeywordRecord.class;
	}

	/**
	 * The column <code>public.keyword.id</code>.
	 */
	public final TableField<KeywordRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.keyword.name</code>.
	 */
	public final TableField<KeywordRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * Create a <code>public.keyword</code> table reference
	 */
	public Keyword() {
		this("keyword", null);
	}

	/**
	 * Create an aliased <code>public.keyword</code> table reference
	 */
	public Keyword(String alias) {
		this(alias, KEYWORD);
	}

	private Keyword(String alias, Table<KeywordRecord> aliased) {
		this(alias, aliased, null);
	}

	private Keyword(String alias, Table<KeywordRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<KeywordRecord, Integer> getIdentity() {
		return Keys.IDENTITY_KEYWORD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<KeywordRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_FA;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<KeywordRecord>> getKeys() {
		return Arrays.<UniqueKey<KeywordRecord>>asList(Keys.CONSTRAINT_FA, Keys.CONSTRAINT_F);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Keyword as(String alias) {
		return new Keyword(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Keyword rename(String name) {
		return new Keyword(name, null);
	}
}
